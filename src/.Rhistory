source("~/Downloads/DATA551_proj-R/src/app.R", echo=TRUE)
source("~/Downloads/DATA551_proj-R/src/app.R", echo=TRUE)
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashBootstrapComponents)
library(ggplot2)
library(plotly)
library(dplyr)
app <- Dash$new(external_stylesheets = dbcThemes$BOOTSTRAP)
murder<-read.csv('processed_data.csv')
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
library(dashBootstrapComponents)
library(ggplot2)
library(plotly)
library(dplyr)
app <- Dash$new(external_stylesheets = dbcThemes$BOOTSTRAP)
murder<-read.csv('processed_data.csv')
WEAPON <- unique(murder$Weapon)
STATE <- unique(murder$State)
available_indicators <- WEAPON
option_indicator <- lapply(available_indicators, function(x) list(label = x, value = x))
YEARS = c(2010, 2011, 2012, 2013, 2014)
Month_sort = c('January','February','March','April','May','June','July','August','September','October','November','December')
gender = c('Female','Male','Unknown')
#####################
##### APP LAYOUT ####
#####################
app$layout(
dbcContainer(
dccTabs(
id='tabs',
value='tab-1',
children =
list(
dccTab(
label='Interactive Map',
value='tab-1',
children = list(
#########
htmlH1("Dashboard of US Homicide Cases by State"),
htmlP("Please select features to do filtering on"),
#first row
dbcRow(
list(
dbcCol(
list(
htmlLabel('Year: '),
dccSlider(
id = 'years_slider',
min = min(YEARS),
max = max(YEARS),
step = 1,
marks = as.list(
setNames(
as.character(seq(from = min(YEARS), to = max(YEARS), by = 1)),
as.character(seq(from = min(YEARS), to = max(YEARS), by = 1))
),
value = 2010,
)
)
)),
dbcCol(
list(
htmlLabel('Weapon: '),
dccChecklist(
id = 'weapons_checklist',
options=option_indicator,
value=list('Gun','Firearm','Blunt Object',
'Knife','Handgun','Drugs','Rifle',
'Rifle','Unknown','Shotgun',
'Suffocation','Strangulation','Fire',
'Fall','Poison','Explosives','Drowning')
)
)
)
)
),
#second row
dbcRow(
dccGraph(id='map_graph')
),
#third row
dbcRow(
list(
dbcRow(list(
htmlLabel("State: "),
dccDropdown(
id = "state_slider",
value = "Alaska",
multi = FALSE,
style = list("font-size" = "smaller"),
options = c(distinct(murder, State))$State %>% purrr::map(function(row) list(label = row, value = row))
),
htmlBr()
)),
dbcRow(list(
htmlBr(),
dbcCol(dccGraph(id='line_graph')),
dbcCol(dccGraph(id='bar_graph'))
))
)
)
)),
dccTab(
label='Monthly Record Graph',
value='tab-2',
children = list(
htmlH1("Dashboard of Murder Cases by Months"),
htmlP("Please select features to do filtering on"),
dbcRow(
list(
# Dropdown
dbcCol(
list(
htmlBr(),
htmlLabel("Crime Type: "),
dccDropdown(
id = "input_crime_type",
value= "Murder or Manslaughter",
multi = FALSE,
clearable = FALSE,
style = list("font-size" = "smaller"),
options = c(distinct(murder, Crime_Type))$Crime_Type %>% purrr::map(function(row) list(label = row, value = row))
),
htmlBr(),
htmlLabel("State: "),
dccDropdown(
id = "input_state",
value = "Alaska",
multi = FALSE,
style = list("font-size" = "smaller"),
options = c(distinct(murder, State))$State %>% purrr::map(function(row) list(label = row, value = row))
),
htmlBr(),
htmlLabel("Weapon Type: "),
dccDropdown(
id = "input_weapon",
value = "Blunt Object",
multi = FALSE,
clearable = TRUE,
style = list("font-size" = "smaller"),
options = c(distinct(murder, Weapon))$Weapon %>% purrr::map(function(row) list(label = row, value = row))
),
htmlBr(),
htmlLabel("Relationship with Victim: "),
dccDropdown(
id = "input_relationship",
value = "Acquaintance",
multi = FALSE,
clearable = TRUE,
style = list("font-size" = "smaller"),
options = c(distinct(murder, Relationship))$Relationship %>% purrr::map(function(row) list(label = row, value = row))
)
),
md=4
),
#Major Rose Graph
dbcCol(
dccGraph(id = "rose_plot"
)
)
)
))
)
)
)
)
)
#####################
##### CALLBACK  #####
#####################
app$callback(
output('map_graph','figure'),
list(
input('years_slider', 'value'),
input('weapons_checklist', 'value')
),
function(year,weapon){
Month_sort = c('January','February','March','April','May','June','July','August','September','October','November','December')
gender = c('Female','Male','Unknown')
#filter
if(!(year %in% YEARS)){
murder_selected=filter(murder,
Year == as.character(2010)
& Weapon %in% weapon)
}else{
murder_selected=filter(murder,
Year == as.character(year)
& Weapon %in% weapon)
}
df_group1 <- data.frame(summarise(group_by(murder_selected,State_Code,Victim_Sex),count_num=n()))
index <- c()
text <- c()
count <- 0
for(idx in 1:nrow(df_group1)){
if(df_group1[idx,]$State_Code %in% index){
#pass
}
else{
count<-count+1
index[count]<-df_group1[idx,]$State_Code
temp_text <- gsub('_',' ','Victim_Sex')
temp_text <- paste(temp_text,'<br>',sep='')
text[count]<-temp_text
sub<-subset(df_group1,State_Code==df_group1[idx,]$State_Code)
for(jdx in 1:nrow(sub)){
temp_text <-paste(temp_text,sub[jdx,2],': ',sub[jdx,]$count_num,'<br>',sep='')
}
text[count]<-temp_text
}
}
res1<-list(index,text)
sta_idx <- res1[[1]]
text1 <- res1[[2]]
df_group2 <- data.frame(summarise(group_by(murder_selected,State_Code,Perpetrator_Sex),count_num=n()))
index <- c()
text <- c()
count <- 0
for(idx in 1:nrow(df_group2)){
if(df_group2[idx,]$State_Code %in% index){
#pass
}
else{
count<-count+1
index[count]<-df_group2[idx,]$State_Code
temp_text <- gsub('_',' ','Perpetrator_Sex')
temp_text <- paste(temp_text,'<br>',sep='')
text[count]<-temp_text
sub<-subset(df_group2,State_Code==df_group2[idx,]$State_Code)
for(jdx in 1:nrow(sub)){
temp_text <-paste(temp_text,sub[jdx,2],': ',sub[jdx,]$count_num,'<br>',sep='')
}
text[count]<-temp_text
}
}
res2<-list(index,text)
text2 <- res2[[2]]
df_trail <- data.frame(summarise(group_by(murder_selected,State, State_Code),count_num=n()))
plot_text_lst <- c()
for(i in 1:nrow(df_trail)){
temp_text <- text1[i]
temp_text <- paste(temp_text,text2[i],sep='')
#temp_text <- ''
plot_text_lst[i] <- paste('State: ',df_trail[i,]$State,'<br>',temp_text,sep='')
}
df_trail['plot_text']<-plot_text_lst
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
fig_map <- plot_geo(df_trail, locationmode = 'USA-states')
fig_map <- fig_map %>% add_trace(
z = ~count_num, text = ~plot_text, locations = ~State_Code,
color = ~count_num, colors = 'Reds'
)
fig_map <- fig_map %>% colorbar(title='Number of records')
fig_map <- fig_map %>% layout(
title = 'Homicide Cases Record by State',
geo = g,
dragmode = "select"
)
fig_map
}
)
app$callback(
output('line_graph','figure'),
list(
input('years_slider', 'value'),
input('weapons_checklist', 'value'),
input('state_slider','value')
),
function(year,weapon,state){
#filter
if(!(year %in% YEARS)){
murder_selected=filter(murder,
Year == as.character(2010)
& Weapon %in% weapon
& State == state)
}else{
murder_selected=filter(murder,
Year == as.character(year)
& Weapon %in% weapon
& State == state)
}
#murder_trial = line_graph_sta(murder_selected)
df_group <- data.frame(summarise(group_by(murder_selected,Month,Perpetrator_Sex),count_num=n()))
text <- c()
new_df <- df_group[1,]
for(idx in 1:length(Month_sort)){
if(Month_sort[idx] %in% df_group$Month){
sub<-subset(df_group,Month==Month_sort[idx])
for(jdx in 1:length(gender)){
if(gender[jdx] %in% sub$Perpetrator_Sex){
#pass
new_df <- rbind(new_df,subset(sub,Perpetrator_Sex==gender[jdx]))
}
else{
vec <- list(Month_sort[idx],gender[jdx],0)
new_df <- rbind(new_df,vec)
}
}
}
}
new<-new_df[-1,]
df_1 <- subset(new,Perpetrator_Sex=='Female')
df_2 <- subset(new,Perpetrator_Sex=='Male')
df_3 <- subset(new,Perpetrator_Sex=='Unknown')
###############
fig_line<-plot_ly(df_1,x=~Month)
fig_line<-fig_line %>% add_lines(y=~df_1$count_num,name='Female',mode='lines',
line = list(color = 'rgb(255, 0, 0)', width = 2))
fig_line<-fig_line %>% add_lines(y=~df_2$count_num,name='Male',mode='lines',
line = list(color = 'rgb(60, 179, 113)', width = 2))
fig_line<-fig_line %>% add_lines(y=~df_3$count_num,name='Unknown',mode='lines',
line = list(color = 'rgb(0, 0, 255)', width = 2))
fig_line<-fig_line %>% layout(title = "Homicide Cases Record by Month",
yaxis = list(title = 'Count of cases'),
xaxis = list(title = 'Month'),
legend = list(title=list(text='<b> Perpetrator Sex </b>')))
fig_line
}
)
app$callback(
output('bar_graph','figure'),
list(
input('years_slider', 'value'),
input('weapons_checklist', 'value'),
input('state_slider','value')
),
function(year,weapon,state){
#filter
if(!(year %in% YEARS)){
murder_selected=filter(murder,
Year == as.character(2010)
& Weapon %in% weapon
& State == state)
}else{
murder_selected=filter(murder,
Year == as.character(year)
& Weapon %in% weapon
& State == state)
}
murder_trial = data.frame(summarise(group_by(murder_selected,Perpetrator_Race,Perpetrator_Sex),count_num=n()))
fig_bar = plot_ly(murder_trial,x=~Perpetrator_Race,y=~count_num,color=~Perpetrator_Sex,type = 'bar')
fig_bar = fig_bar %>% layout(title = "Homicide Cases Record by Perpetrator Race",
yaxis = list(title = 'Count of cases'),
xaxis = list(title = 'Perpetrator Race'),
legend = list(title=list(text='<b> Perpetrator Sex </b>')),
barmode = 'stack')
fig_bar
}
)
app$callback(
output("rose_plot", "figure"),
list(
input("input_crime_type", "value"),
input("input_state", "value"),
input("input_weapon", "value"),
input("input_relationship", "value")
),
function(input_crime_type, input_state, input_weapon, input_relationship) {
filter_murder <- filter(murder,
Crime_Type == input_crime_type
& State == input_state
& Weapon == input_weapon
& Relationship == input_relationship)
grouped_df <- (filter_murder %>% group_by(Month) %>% summarise(total_count = n())
%>% as.data.frame() %>% mutate(Month = factor(Month, levels = month.name))
%>% arrange(Month)
)
fig <- plot_ly() %>% add_trace(data = grouped_df,
r = ~total_count,
theta = ~Month,
type = "barpolar")
return(fig)
}
)
app$run_server(debug=TRUE)
source("~/Downloads/DATA551_proj-R/src/app.R", echo=TRUE)
